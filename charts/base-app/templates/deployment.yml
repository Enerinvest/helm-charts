---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ include "base-app.namespace" . }}
  name: {{ include "base-app.serviceId" . }}
  labels:
    {{- include "base-app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/service-type: public 
      {{- include "base-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      namespace: {{ include "base-app.namespace" . }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/service-type: public             
        {{- include "base-app.labels" . | nindent 8 }}
    spec:
      {{- if .Values.serviceAccount.use }}
      serviceAccountName: {{ include "base-app.serviceAccountName" . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.efs.enabled }}
      volumes:
      - name: appdata
        persistentVolumeClaim:
          claimName: efs-appdata-{{ include "base-app.appGroup" . }}
      {{- end }}   
      {{- if .Values.aws_secrets.enabled }}      
      volumes:
      - name: {{ include "base-app.serviceId" . }}-secrets 
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ include "base-app.serviceId" . }}-secrets             
      {{- end }}   
      containers:
        - name: {{ include "base-app.serviceId" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "base-app.imageUrl" . }}
          {{- if .Values.image.workingDir }}
          workingDir: {{ .Values.image.workingDir | quote }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.image.command }}
          {{- with .Values.image.command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end}}
          {{- end}}
          {{- if .Values.image.args }}
          {{- with .Values.image.args }}
          args:
            {{- toYaml . | nindent 12 }}
          {{- end}}
          {{- end}}
          ports:
            - name: appport
              containerPort: {{ .Values.app.port }}
              protocol: TCP
          {{- if .Values.app.health.enabled }}
          livenessProbe:
            initialDelaySeconds: 50
            periodSeconds: 20
            httpGet:
              path: {{ .Values.app.health.path }}
              port: {{ .Values.app.health.port | default .Values.app.port }}
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 30
            httpGet:
              path: {{ .Values.app.health.path }}
              port: {{ .Values.app.health.port | default .Values.app.port }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "base-app.instanceId" . }}-config
                optional: true
            {{- if .Values.useDefaultConfigMaps }}
            - configMapRef:
                name: enerin-app-config-default
            - configMapRef:
                name: enerin-app-config-{{ .Values.deploy.service }}
            - configMapRef:
                name: {{ .Values.deploy.project }}-project-config
                optional: true
            - configMapRef:
                name: all-{{ .Values.deploy.environmentGroup }}-config
                optional: true
            - configMapRef:
                name: {{ include "base-app.appGroup" . }}-config
                optional: true
            - configMapRef:
                name: {{ include "base-app.serviceId" . }}-config
                optional: true                
            - secretRef:
                name: {{ include "base-app.instanceId" . }}-secrets
                optional: true
            - configMapRef:
                name: all-{{ .Values.deploy.environmentGroup}}-overrides
                optional: true
            {{- end }}
            {{- range .Values.configMaps }}
            - configMapRef:
                name: {{ .name }}
                {{- if .optional }}
                optional: {{ .optional }}
                {{- end }}
            {{- end }}
            {{- range .Values.secrets }}
            - secretRef:
                name: {{ .name }}
                {{- if .optional }}
                optional: {{ .optional }}
                {{- end }}
            {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: APP_PROJECT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/app-project']
            - name: PROJECT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/app-project']
            - name: APP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/app-name']
            - name: APP_TIER
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/app-service']
            - name: APP_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/app-instance']
            - name: MAIL_FROM_DOMAIN
              value: "{{- include "base-app.mailFromDomain" . }}"
            - name: S3_BUCKET
              value: "{{- include "base-app.s3Bucket" . }}"
            {{- if .Values.redis.enabled }}
            - name: REDIS_URL
              value: {{ include "base-app.serviceId" . }}-redis
            {{- end }}
              {{- if .Values.db.connection.host }}
            - name: {{ .Values.db.vars.prefix }}{{ .Values.db.vars.host }}
              value: {{ .Values.db.connection.host | quote }}
            {{- end }}
            {{- if .Values.db.connection.port }}
            - name: {{ .Values.db.vars.prefix }}{{ .Values.db.vars.port }}
              value: {{ .Values.db.connection.port | quote }}
            {{- end }}
            - name: {{ .Values.db.vars.prefix }}{{ .Values.db.vars.user }}
              value: {{ include "base-app.db_connection.user" . | quote }}
            - name: {{ .Values.db.vars.prefix }}{{ .Values.db.vars.name }}
              value: {{ include "base-app.db_connection.name" . | quote }}            
            {{- range $k, $v := .Values.environment }}
            - name: {{ $k }}
              value: {{ $v | quote}}
            {{- end }}
          {{- if .Values.efs.enabled }}
          volumeMounts:
          - name: appdata
            mountPath: /app/public/system
          {{- end }}
          {{- if .Values.aws_secrets.enabled }}      
          volumeMounts:
          - name: {{ include "base-app.serviceId" . }}-secrets
            mountPath: "{{ .Values.aws_secrets.mountPath }}"
            readOnly: true             
          {{- end }}   
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}









